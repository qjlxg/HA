name: Proxy Nodes

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间 00:00 运行
  push:
    paths:
      - 'sources.list' # 监控 sources.list 更改
      - 'ultimate_node_extractor.py' # 监控脚本更改

concurrency:
  group: node-extractor-${{ github.ref }} # 按分支分组，确保单一实例
  cancel-in-progress: true # 取消进行中的旧实例

jobs:
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 操作系统

    steps:
    - name: Checkout repository # 步骤 1: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 获取完整历史，便于 git 操作

    - name: Set up Python # 步骤 2: 设置 Python 环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.13' # 明确使用 Python 3.13，与脚本兼容

    - name: Install dependencies # 步骤 3: 安装所需的 Python 库
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp beautifulsoup4 pyyaml
        pip install urllib3
      env:
        PIP_NO_CACHE_DIR: true # 禁用 pip 缓存，减少存储占用


    - name: Run Node Extractor Script # 步骤 5: 运行节点提取脚本
      run: |
        python node_extractor.py
      env:
        PYTHONUNBUFFERED: 1 # 确保日志实时输出

    - name: Commit and Push changes # 步骤 6: 提交并推送更改
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add data/proxy_nodes_*.txt data/node_counts.csv data/url_cache.json data/failed_urls.log || true
        git commit -m "Update proxy nodes and logs [$(date -u +'%Y-%m-%d %H:%M:%S UTC')]" || echo "No changes to commit"
        git push || echo "No changes to push"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用默认 token 进行推送

    - name: Upload artifacts # 步骤 7: 上传生成的文件作为工作流产物
      uses: actions/upload-artifact@v4
      with:
        name: proxy-nodes-data
        path: data/
        retention-days: 7 # 产物保留7天

name: Clash Forge Config Update

on:
  push:
    branches:
      - main
  workflow_dispatch: # 允许从 GitHub UI 手动触发
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间午夜运行

permissions:
  contents: write # 需要写入权限才能推送更改到仓库

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # 或者 windows-latest, macos-latest 根据你的偏好
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # 使用最新的 Python 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # 确保安装 lxml[html_clean] 来解决 requests_html 的依赖问题
        pip install pyyaml httpx requests requests-html psutil lxml[html_clean]

    - name: Ensure input directory exists
      # 这是一个好习惯，确保 input 目录存在，即使它可能在 checkout 后不存在
      run: |
        mkdir -p input

    - name: Run ClashForge.py
      # 脚本会下载 mihomo 核心，如果它不存在
      # 我们传递 '--check' 来启用代理检查功能
      run: |
        python ClashForge.py --check

    - name: Commit and push changes
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"
        
        # 仅当文件存在时才添加
        [ -f clash_config.yaml ] && git add clash_config.yaml
        [ -f last_successful_proxies.txt ] && git add last_successful_proxies.txt
        [ -f last_check.txt ] && git add last_check.txt
        
        # 检查是否有任何更改需要提交
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update Clash config and proxy data [skip ci]" && git push)
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub Actions 自动提供

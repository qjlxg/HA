name: Proxy Scraper and Deduplication

on:
  push: # 在代码推送到仓库时触发
    branches:
      - main # 或者您希望监控的其他分支，例如 'master'
  workflow_dispatch: # 支持手动触发
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 00:00 自动运行（北京时间 08:00）

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # 使用您指定的 Python 版本

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 新增步骤：恢复 data/cache 目录
      # 在运行代理抓取脚本之前，尝试恢复上次运行保存的缓存
      - name: Restore data/cache
        uses: actions/cache@v4
        with:
          path: data/cache # 指定要缓存的目录
          # cache key 应该包含操作系统和 sources.list 文件的哈希，
          # 这样当 sources.list 变化时，缓存会失效，确保重新抓取
          key: ${{ runner.os }}-proxy-scraper-cache-${{ hashFiles('sources.list') }}
          # restore-keys 允许在精确匹配失败时尝试更通用的键
          restore-keys: |
            ${{ runner.os }}-proxy-scraper-cache-

      - name: Run Proxy Scraper Script
        run: |
          python proxy_scraper.py # 直接运行脚本
        env:
          PYTHONPATH: ${{ github.workspace }} # 确保项目根目录在 PYTHONPATH 中

      # 新增步骤：保存 data/cache 目录
      # 在代理抓取脚本运行结束后，保存更新后的缓存，即使脚本失败也尝试保存
      - name: Save data/cache
        uses: actions/cache/save@v4 # 注意这里是 actions/cache/save@v4
        if: always() # 确保即使前面的步骤失败，这个步骤也会运行，以保存部分缓存
        with:
          path: data/cache # 指定要保存的目录
          # 保存时的 key 必须与恢复时的 key 完全一致
          key: ${{ runner.os }}-proxy-scraper-cache-${{ hashFiles('sources.list') }}

      - name: Run Deduplication Module
        run: |
          python deduplication_module.py # 运行去重模块
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Commit and Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "自动更新代理节点和日志 $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          file_pattern: 'data/*.txt data/*.csv' # 提交 data 目录下所有 .txt 和 .csv 文件
          force_push: true # <--- 在这里添加这一行
          # 再次强调：data/cache 目录不会被提交到 Git 仓库，它由 actions/cache 管理

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`工作流失败: ${{ github.job }}. 请检查日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`);

name: Auto Update Data

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次
  workflow_dispatch: # 允许手动触发

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository # 步骤1: 检出仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史，以便rebase操作顺利进行

      - name: Configure Git # 步骤2: 配置 Git 用户信息 (重要!)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set up Python # 步骤3: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 使用最新的 Python 3 版本，或者指定你的脚本需要的版本，例如 '3.9'

      - name: Install dependencies # 步骤4: 安装 Python 依赖 (如果 proxy_scraper.py 有依赖的话)
        # 如果你的 proxy_scraper.py 脚本依赖于第三方库，比如 requests、bs4 等
        # 你需要有一个 requirements.txt 文件在仓库的根目录
        # 如果没有依赖，可以删除这一步
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Pull latest changes with rebase # 步骤5: 拉取远程最新更改并变基
        run: |
          git pull --rebase origin main

      - name: Run proxy_scraper.py # 步骤6: 运行你的代理抓取脚本
        run: |
          # 运行位于仓库根目录的 proxy_scraper.py 脚本
          # 确保这个脚本会生成或修改 data/*.txt 和 data/*.csv 文件
          python proxy_scraper.py

      - name: Auto commit and push # 步骤7: 自动提交并推送更改
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: data/*.txt data/*.csv # 只提交 data/ 目录下的 .txt 和 .csv 文件
          commit_message: 自动更新代理节点和日志 $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          commit_author: qjlxg <12179157+qjlxg@users.noreply.github.com>
